@property --timer-minutes {
    initial-value: 0;
    inherits: true;
    syntax: "<integer>";
}

@property --timer-seconds {
    initial-value: 0;
    inherits: true;
    syntax: "<integer>";
}

@property --timer-rotation {
    initial-value: 0deg;
    inherits: true;
    syntax: "<angle>";
}

@keyframes minutes {
    to {
        --timer-minutes: calc(var(--timing-seconds) / 60);
    }
}

@keyframes seconds {
    to {
        --timer-seconds: 60;
    }
}

@keyframes rotation {
    to {
        --timer-rotation: 360deg;
    }
}

@keyframes tick {
    /* dummy */
}

*,
*::after,
*::before {
    margin: 0;
    box-sizing: border-box;
    user-select: none;
}

:root {
    --timing-seconds: 60;
}

body {
    height: 100%;
    overflow: hidden;

    /* question: count all questions */
    counter-set: minutes var(--timer-minutes) seconds var(--timer-seconds)
        question;

    animation-name: minutes, seconds, tick, rotation;
    animation-duration:
        calc(var(--timing-seconds) * 1s),
        60s,
        1s,
        calc(var(--timing-seconds) * 1s);
    animation-timing-function:
        steps(calc(var(--timing-seconds) / 60)),
        steps(60),
        steps(1),
        linear;
    animation-direction: reverse, reverse, reverse, reverse;
    animation-iteration-count: 1, 60, var(--timing-seconds), 1;
    animation-play-state: paused;

    & menu {
        visibility: hidden;
    }

    &:has(input.quest:checked) {
        &:not(:has(dialog:modal, input.finished:checked)) {
            animation-play-state: running;
        }

        & menu {
            visibility: visible;
        }
    }

    &:has(input.finished:checked) {
        & button.finish, button.pause {
            display: none;
        }

        & button.finished {
            display: inline;
        }
    }
}

article {
    counter-reset: questions;

    & > header {
        border: 1px solid gray;
        width: 120px;
        height: 120px;

        & > span::before {
            content: counter(answered);
        }

        & > span::after {
            content: counter(questions);
        }
    }
}

button {
    &.pause, &.finish, &.finished {
        min-width: 48px;
        height: 48px;
        border-radius: 8px;
        border: 3px solid green;
        padding: 8px;
    }

    &.finished {
        display: none;
    }
}

button.navigation {
    height: 48px;
    min-width: 48px;
    border-radius: 24px;
    border: 3px solid green;
    font-size: 0.1px;

    &.page {
        background-color: IndianRed;
        &::before {
            font: bold 14px sans-serif;
            content: counter(question);
        }

        /* mark edited pages */
        &:is(
            section:has(.answer:checked, .dropable:not(:placeholder-shown))
                button.page
        ) {
            background-color: lightgreen;
        }

        /* mark current active page */
        &:is(section:has(.page-visibility:checked) button.page) {
            background-color: white;
            border-radius: 8px;

            &::before {
                font: bold 18px sans-serif;
            }
        }
    }

    /* back/forward buttons, hidden at first/last question */
    &.next:is(
        article:last-of-type:has(section:last-of-type input.quest:checked)
            button.next
    ),
    &.prev:is(
        article:first-of-type:has(section:first-of-type input.quest:checked)
            button.prev
    ) {
        visibility: hidden;
    }

    &.overview {
        margin-right: 48px;
    }
}

dialog {
    width: 100vw;
    height: 100vh;
    max-width: unset;
    max-height: unset;
    position: relative;
}

div.align {
    display: flex;
    width: max-content;
    margin: auto;

    &.vertical {
        flex-direction: column;
        row-gap: 16px;
    }

    &.horizontal {
        flex-direction: row;
        column-gap: 16px;
    }
}

div.page-visibility-checked {
    position: fixed;
    visibility: hidden;
    inset: 0;

    &:has(input.page-visibility:checked) {
        visibility: visible;
    }
}

div.page-gridview {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
}

div.page-listview {
    background-color: blue;
    display: flex;
    justify-content: center;
    align-items: end;
    gap: 8px;
    padding: 0 0 16px 0;
}

div.page-listitem {
    background-color: lightblue;
    inset: 0 0 84px 0;
}

div.reset-questions {
    counter-reset: questions;
}

div.increment-questions {
    /*  question: count all questions 
        question: count questions in chapter/article */
    counter-increment: questions question;
}

div.reset-answered {
    counter-reset: answered;
}

fieldset {
    display: flex;
    flex-direction: column;
    gap: 32px;
    margin: 100px auto;
    max-width: 1024px;
    padding: 32px;
}

form {
    display: contents;
}

h3 {
    &::after {
        content: " " counter(question);
    }
}

html {
    height: 100%;
}

input {
    &.answer {
        &[type="radio"], &[type="checkbox"] {
            appearance: none;
        }
    }

    &.page-visibility {
        display: none;
    }
}

label.answer {
    display: flex;
    align-items: center;
    min-height: 48px;
    cursor: pointer;

    border-radius: 8px;
    padding: 8px 24px 8px 48px;

    &:has([type="checkbox"]) {
        position: relative;
        background-color: white;

        &::before {
            content: "";
            width: 32px;
            height: 32px;
            top: 8px;
            left: 8px;
            position: absolute;
            /* border-radius: 8px; */
            border: 4px solid black;
            background-color: white;
        }
    }

    &:has([type="radio"]) {
        position: relative;
        background-color: white;

        &::before {
            content: "";
            width: 32px;
            height: 32px;
            top: 8px;
            left: 8px;
            position: absolute;
            border-radius: 50%;
            border: 4px solid black;
            background-color: white;
        }
    }

    &:has([type="checkbox"]:checked)&::before {
        background-image: linear-gradient(black);
        background-size: 9.5px 9.5px;
        background-repeat: no-repeat;
        background-position: center;
    }

    &:has([type="radio"]:checked)&::before {
        background-image: radial-gradient(black, black 5px, transparent 6px);
    }
}

label.drop {
    margin: 0 0.25em;
    border-radius: 8px;
    border: 3px solid gray;
    background-color: #fff;

    & > input {
        cursor: grab;
        text-align: center;
        caret-color: transparent;
        background: none;
        border: none;

        &:active {
            cursor: grabbing;
        }
    }
}

menu {
    padding: 8px;
    list-style: none;
    position: fixed;
    border: 3px solid green;
    margin: auto;
    top: 10px;
    left: calc(50% - 100px);
    height: 68px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    gap: 16px;

    & li:has(output.time) {
        display: flex;
        place-content: center;
        place-items: center;
        aspect-ratio: 1;
        width: 48px;
        border-radius: 50%;
        border: 4px solid transparent;
        background:
            radial-gradient(#fff) padding-box,
            conic-gradient(
            green 0,
            green var(--timer-rotation),
            #a7a7a7 var(--timer-rotation)
        ) border-box;
        animation: timer 120s linear forwards;
    }
}

section {
    /* count edited pages in chapter/article */
    &:has(.answer:checked, .dropable:not(:placeholder-shown)) {
        counter-increment: answered;
    }
}

output.time {
    font: bold 14px sans-serif;
}

.minutes::before,
output.time::before {
    content: counter(minutes, decimal-leading-zero);
}

.seconds::after,
output.time::after {
    content: counter(seconds, decimal-leading-zero);
}
